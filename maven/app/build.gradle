/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'war'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'mysql:mysql-connector-java:8.0.33' 
    
    implementation 'org.postgresql:postgresql:42.7.1'


        // Servlet API
    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.apache.tomcat:tomcat-jsp-api:9.0.41'

    // Embedded Tomcat for running locally
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.78'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.78'
}

war {
    archiveFileName = 'maven.war'
}

task runEmbeddedTomcat(type: JavaExec) {
    main = 'servlet.ServletApp' 
    classpath = sourceSets.main.runtimeClasspath
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    // mainClass = 'org.example.App'
    mainClass = 'Servlet.ServletApp'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
