JDBC -> Java Database Connectivity.

To connect java with db we require drivers, There are 4 type of driver such as 

To use we must follow these 7 steps:
    1. import the package
    2. Load & Register the driver
    3. Connecting/Establish the connection
    4. Create the statement
    5. Execute the query
    6. Process request
    7. Close request

Each db have its own driver, for mysql it's com.mysql.jdbc driver look for mysql connector.

Class.forName('driver_name') is method to register a driver.
instantiate the Connection interface.

Example Code:

1.import Java.sql.*
2. Class.forName("com.mysql.jdbc Driver")
3. Connection conn = Driver getConnection("URL","UN","PW") -> URL: databse url, UN: user name, PW: user password 
4. statement st = com.CreateStatement()
5. ResultSet rs = st.executeQuery("select * from student")
6. rs.next()
7. rs.getInt(1) + " " + rs.getInt(2)


## **🔹 JDBC Mastery Roadmap**

### **1️⃣ JDBC Basics (You Already Know)**
✔ **Import JDBC package:** `import java.sql.*;`  
✔ **Load & Register Driver:** `Class.forName("org.postgresql.Driver");`  
✔ **Establish Connection:** `DriverManager.getConnection(url, user, pass);`  
✔ **Create & Execute Statement:** `Statement stmt = con.createStatement();`  
✔ **Process Results:** `ResultSet rs = stmt.executeQuery(query);`  
✔ **Close Connection:** `con.close();`  

---

### **2️⃣ Advanced JDBC Concepts**
✅ **Types of JDBC Drivers:**  
- **JDBC-ODBC Bridge Driver (Type 1)** → Legacy, avoid using  
- **Native API Driver (Type 2)** → Uses OS-specific libraries  
- **Network Protocol Driver (Type 3)** → Less common  
- **Thin Driver (Type 4)** → **Best for modern Java apps**  

✅ **Handling SQL Exceptions Properly**  
- Instead of `catch (Exception e)`, use:
  ```java
  catch (SQLException e) {
      System.err.println("SQL Error: " + e.getMessage());
      e.printStackTrace();
  }
  ```

✅ **Using Prepared Statements** (Prevents SQL Injection)  
- **❌ Bad Practice (Vulnerable to SQL Injection)**  
  ```java
  Statement stmt = con.createStatement();
  ResultSet rs = stmt.executeQuery("SELECT * FROM users WHERE username = '" + userInput + "'");
  ```
- **✅ Best Practice (Using PreparedStatement)**  
  ```java
  PreparedStatement pstmt = con.prepareStatement("SELECT * FROM users WHERE username = ?");
  pstmt.setString(1, userInput);
  ResultSet rs = pstmt.executeQuery();
  ```

✅ **Using Transactions in JDBC**  
- **By default, each SQL statement is auto-committed.** To **group multiple queries in one transaction**, use:
  ```java
  con.setAutoCommit(false);
  try {
      stmt.executeUpdate("INSERT INTO orders ...");
      stmt.executeUpdate("UPDATE inventory ...");
      con.commit();  // ✅ Commit transaction
  } catch (SQLException e) {
      con.rollback();  // ❌ Rollback if any failure
      e.printStackTrace();
  } finally {
      con.setAutoCommit(true);
  }
  ```

✅ **Batch Processing for Performance Optimization**  
Instead of executing multiple queries one by one:
  ```java
  stmt.addBatch("INSERT INTO employees VALUES (1, 'Alice')");
  stmt.addBatch("INSERT INTO employees VALUES (2, 'Bob')");
  stmt.executeBatch(); // ✅ Executes all at once, improving performance
  ```

✅ **Using Connection Pooling (HikariCP, C3P0, Apache DBCP)**  
- Instead of creating a new connection for each request (**slow** 🐢), **use a connection pool**:
  ```java
  HikariConfig config = new HikariConfig();
  config.setJdbcUrl("jdbc:postgresql://localhost:5432/testdb");
  config.setUsername("postgres");
  config.setPassword("password");
  HikariDataSource ds = new HikariDataSource(config);

  Connection con = ds.getConnection(); // ✅ Uses pooled connection
  ```

✅ **Reading Database Metadata**  
- Get **table names, column types, indexes** dynamically:
  ```java
  DatabaseMetaData metaData = con.getMetaData();
  ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});
  while (tables.next()) {
      System.out.println("Table: " + tables.getString("TABLE_NAME"));
  }
  ```

---

## **🔹 Next Steps: Hands-on Exercises**
1️⃣ **Write a JDBC program** that:
   - Connects to **PostgreSQL**  
   - Uses a **PreparedStatement**  
   - Uses **Transactions (commit & rollback)**  

2️⃣ **Set up HikariCP** in your Gradle project.

3️⃣ **Build a mini Java application** that interacts with a database (CRUD operations).  

🚀 **I’ll guide you through each step!** Let me know which one you want to start first.


Important Methods:

st.executeQuery() -> DQL, it gives ResultSet
st.executeUpdate() -> DML, it gives number/count of rows/cols affected.


## The two stuff are same clearly observable. 
Class.forName("com.mysql.jdbc.Driver")

DriverManager.registerDriver(new com.mysql.jdbc.Driver())

#####More details on JDBC Connection---------------------------------------------------

### **🔍 Connecting Java to Non-Relational (NoSQL) Databases**
For relational databases like **PostgreSQL, MySQL, and Oracle**, we use **JDBC** (Java Database Connectivity) to establish a connection using SQL queries.  

However, for **NoSQL databases** (like MongoDB, Redis, or Cassandra), the connection method **differs** because these databases do not use SQL and do not have a JDBC driver in the same way.

---

### **🔗 How to Connect Java to Different NoSQL Databases?**
✅ **Each NoSQL database has its own Java client library or API** instead of using JDBC.  
✅ **The connection and querying methods depend on the specific NoSQL database.**  

## **1️⃣ Connecting Java to MongoDB**  
MongoDB is a **document-based NoSQL database** that stores data in **JSON-like BSON format**.  

### **📌 Steps to Connect Java to MongoDB**
1. **Add MongoDB Driver to `build.gradle`**
   ```gradle
   dependencies {
       implementation 'org.mongodb:mongodb-driver-sync:4.10.2'
   }
   ```
   
2. **Java Code to Connect and Fetch Data**
   ```java
   import com.mongodb.client.*;
   import org.bson.Document;

   public class MongoDBConnection {
       public static void main(String[] args) {
           // 🔹 Connect to MongoDB
           MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
           MongoDatabase database = mongoClient.getDatabase("testdb");

           // 🔹 Get Collection
           MongoCollection<Document> collection = database.getCollection("students");

           // 🔹 Query Data
           Document student = collection.find().first();
           if (student != null) {
               System.out.println("Student: " + student.toJson());
           }

           mongoClient.close(); // Close connection
       }
   }
   ```
✅ **No SQL queries!** Instead, we use **MongoDB’s native API** (`find()`, `insertOne()`, etc.).  
✅ **MongoDB doesn’t need JDBC.** It uses **MongoDB Driver**.

---

## **2️⃣ Connecting Java to Redis (Key-Value Store)**
Redis is an **in-memory key-value database**. It is mainly used for **caching, real-time analytics, and message brokering**.

### **📌 Steps to Connect Java to Redis**
1. **Add Redis Client to `build.gradle`**
   ```gradle
   dependencies {
       implementation 'redis.clients:jedis:5.1.0'
   }
   ```
   
2. **Java Code to Connect and Fetch Data**
   ```java
   import redis.clients.jedis.Jedis;

   public class RedisConnection {
       public static void main(String[] args) {
           Jedis jedis = new Jedis("localhost", 6379);

           // 🔹 Store Key-Value Pair
           jedis.set("user:1001", "Rajeev");

           // 🔹 Retrieve Value
           String value = jedis.get("user:1001");
           System.out.println("Stored value in Redis: " + value);

           jedis.close(); // Close connection
       }
   }
   ```
✅ **Uses Jedis Client** (not JDBC).  
✅ **Key-Value Storage instead of SQL queries.**  

---

## **3️⃣ Connecting Java to Cassandra (Column-Family Store)**
Cassandra is a **highly scalable NoSQL database** that works with **column-family storage instead of rows & tables**.

### **📌 Steps to Connect Java to Cassandra**
1. **Add Cassandra Java Driver to `build.gradle`**
   ```gradle
   dependencies {
       implementation 'com.datastax.oss:java-driver-core:4.15.0'
   }
   ```
   
2. **Java Code to Connect and Fetch Data**
   ```java
   import com.datastax.oss.driver.api.core.CqlSession;
   import java.net.InetSocketAddress;

   public class CassandraConnection {
       public static void main(String[] args) {
           // 🔹 Connect to Cassandra
           CqlSession session = CqlSession.builder()
                   .addContactPoint(new InetSocketAddress("127.0.0.1", 9042))
                   .withLocalDatacenter("datacenter1")
                   .build();

           // 🔹 Query Data
           session.execute("INSERT INTO students (id, name) VALUES (1, 'Rajeev')");
           System.out.println("Data Inserted Successfully!");

           session.close(); // Close connection
       }
   }
   ```
✅ **Uses Cassandra's CQL (Cassandra Query Language)** instead of traditional SQL.  
✅ **No JDBC needed, uses Cassandra Java Driver.**  

---

## **📌 Key Differences Between Relational & NoSQL Database Connections in Java**
| Feature | Relational (PostgreSQL, MySQL) | NoSQL (MongoDB, Redis, Cassandra) |
|---------|-----------------------------|--------------------------------|
| **Connection Method** | JDBC (`DriverManager.getConnection()`) | Specific Client Library (`MongoClients.create()`, `Jedis()`, etc.) |
| **Query Language** | SQL (`SELECT * FROM students`) | Native API (`collection.find()`, `jedis.get()`, etc.) |
| **Data Storage** | Tables & Rows | JSON, Key-Value, Column-Family |
| **Scalability** | Vertical Scaling (More CPU, RAM) | Horizontal Scaling (Distributed Nodes) |

---

## **🚀 Conclusion**
- **JDBC is only for relational databases (PostgreSQL, MySQL, etc.).**
- **NoSQL databases use their own Java client libraries (MongoDB Driver, Jedis for Redis, etc.).**
- **Each NoSQL database has a different connection and querying mechanism.**
- **NoSQL databases do not use SQL queries; they have their own API methods.**
